// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/foo/log.proto

package foo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	SaveHttpLog(ctx context.Context, in *SaveHttpLogRequest, opts ...grpc.CallOption) (*HttpLog, error)
	SaveStreamHttpLog(ctx context.Context, opts ...grpc.CallOption) (LogService_SaveStreamHttpLogClient, error)
	FindHttpLog(ctx context.Context, in *FindHttpLogRequest, opts ...grpc.CallOption) (*HttpLog, error)
	GetHttpLog(ctx context.Context, in *GetHttpLogRequest, opts ...grpc.CallOption) (*HttpLogs, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) SaveHttpLog(ctx context.Context, in *SaveHttpLogRequest, opts ...grpc.CallOption) (*HttpLog, error) {
	out := new(HttpLog)
	err := c.cc.Invoke(ctx, "/foo.LogService/SaveHttpLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SaveStreamHttpLog(ctx context.Context, opts ...grpc.CallOption) (LogService_SaveStreamHttpLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], "/foo.LogService/SaveStreamHttpLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceSaveStreamHttpLogClient{stream}
	return x, nil
}

type LogService_SaveStreamHttpLogClient interface {
	Send(*SaveHttpLogRequest) error
	CloseAndRecv() (*HttpLogStreamResponse, error)
	grpc.ClientStream
}

type logServiceSaveStreamHttpLogClient struct {
	grpc.ClientStream
}

func (x *logServiceSaveStreamHttpLogClient) Send(m *SaveHttpLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceSaveStreamHttpLogClient) CloseAndRecv() (*HttpLogStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HttpLogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) FindHttpLog(ctx context.Context, in *FindHttpLogRequest, opts ...grpc.CallOption) (*HttpLog, error) {
	out := new(HttpLog)
	err := c.cc.Invoke(ctx, "/foo.LogService/FindHttpLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetHttpLog(ctx context.Context, in *GetHttpLogRequest, opts ...grpc.CallOption) (*HttpLogs, error) {
	out := new(HttpLogs)
	err := c.cc.Invoke(ctx, "/foo.LogService/GetHttpLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	SaveHttpLog(context.Context, *SaveHttpLogRequest) (*HttpLog, error)
	SaveStreamHttpLog(LogService_SaveStreamHttpLogServer) error
	FindHttpLog(context.Context, *FindHttpLogRequest) (*HttpLog, error)
	GetHttpLog(context.Context, *GetHttpLogRequest) (*HttpLogs, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) SaveHttpLog(context.Context, *SaveHttpLogRequest) (*HttpLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveHttpLog not implemented")
}
func (UnimplementedLogServiceServer) SaveStreamHttpLog(LogService_SaveStreamHttpLogServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveStreamHttpLog not implemented")
}
func (UnimplementedLogServiceServer) FindHttpLog(context.Context, *FindHttpLogRequest) (*HttpLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHttpLog not implemented")
}
func (UnimplementedLogServiceServer) GetHttpLog(context.Context, *GetHttpLogRequest) (*HttpLogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHttpLog not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_SaveHttpLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveHttpLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SaveHttpLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.LogService/SaveHttpLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SaveHttpLog(ctx, req.(*SaveHttpLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SaveStreamHttpLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).SaveStreamHttpLog(&logServiceSaveStreamHttpLogServer{stream})
}

type LogService_SaveStreamHttpLogServer interface {
	SendAndClose(*HttpLogStreamResponse) error
	Recv() (*SaveHttpLogRequest, error)
	grpc.ServerStream
}

type logServiceSaveStreamHttpLogServer struct {
	grpc.ServerStream
}

func (x *logServiceSaveStreamHttpLogServer) SendAndClose(m *HttpLogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceSaveStreamHttpLogServer) Recv() (*SaveHttpLogRequest, error) {
	m := new(SaveHttpLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogService_FindHttpLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHttpLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).FindHttpLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.LogService/FindHttpLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).FindHttpLog(ctx, req.(*FindHttpLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetHttpLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHttpLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetHttpLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.LogService/GetHttpLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetHttpLog(ctx, req.(*GetHttpLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foo.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveHttpLog",
			Handler:    _LogService_SaveHttpLog_Handler,
		},
		{
			MethodName: "FindHttpLog",
			Handler:    _LogService_FindHttpLog_Handler,
		},
		{
			MethodName: "GetHttpLog",
			Handler:    _LogService_GetHttpLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveStreamHttpLog",
			Handler:       _LogService_SaveStreamHttpLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/foo/log.proto",
}
